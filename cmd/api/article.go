package main

import "net/http"

func (app *application) ArticleHandler(w http.ResponseWriter, r *http.Request) {
	w.Write([]byte("Depth in a Language\nHaving 30 tabs of tutorials open is not the way to achieve production level skills in 30 programming languages. It is simply not useful to know how to use the print or log function in 30 different programming languages. That wont tell you what makes any language more useful than the next. Instead of 30 tabs of tutorials on different languages, find one in-depth tutorial on one or two languages (depending on you real diet for these things) and stick to them. Learn all that you can and start building things that fit that language's paradigm. Explain to yourself what it is doing in the various parts of your project. Eventually you'll run into comparison of the language you're learning in depth versus other languages and it will lead to a generally better grasp on programming languages overall.\n\nDepth in a Framework\nWhether you consider yourself a front-end, back-end, or full-stack engineer, there are simply too many frameworks to learn them all at once. Don't let job descriptions and conference talks convince you that you're unhireable if you don't know framework\n\n{{ some_framework}}\n\n. Similar to the standard set with regard to languages, you're better off picking some particular tool and running with it. Learn how to safely handle form inputs and where certain files should go. Read documentation and watch talks that explain not just how to build an application in the framework but learn why its built that way. Build something simple and share it with the community behind that framework and then iterate to make it better.\n\nDepth in Databases\nA lot of web developers can make the mistake of thinking that databases are simple and when you're only running your app on localhost that can seem true enough. But app in production need to be able to scale and a lot of collection and table design decisions go into that among other concepts so don't simply build the same app in SQL and NoSQL and move on. Pick a journey with one of these structures and get good at utilizing it for the next year."))
}
